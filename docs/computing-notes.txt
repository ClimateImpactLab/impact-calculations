Computing Proposal

This plan includes provisions for managing data and impact functions, producing results and analyses like those in the ACP, and making the process and relationships between data and results more transparent.

== Top-Level Conventions

= Version Dependencies

Every data file and computation will be associated with a version.  This will help us identify when one change requires a cascade of other changes, and where those changes are throughout the project.  The following rules define how versions operate:

 * A version consists of a series of segment, separated by periods, where every segment after the first one is an integer: GCP-Name.#.#....#
 * When a component is changed, the last segment of its version is incremented.
 * Components may only rely on other components whose entire version number is a prefix of their own version number.

So CitizenCane.3.22 may rely on CitizenCane.3.  If CitizenCane.3.22 is updated and becomes CitizenCane.3.23, it does not require changes to anything with a version CitizenCane.3, but it does require changes to a component with version number CitizenCane.3.22.7.

When a version segment is incremented, all components labled with a previous verison are invalidated.

= Region Hierarchy

A master region hierarchy file will relate a region code to every region, at each level of aggregation.  This file is important for coordinating between the teams and between datasets.  In particular, each of the following will be associated through region keys in the following ways:
 * Weather timeseries: a 'region' entry in the NetCDF file
 * Impact results: output filenames will be <region>.csv
 * Aggregation weights and other spatial data: the first column specify region keys.

The region hierarchy should be determined before any datasets are processed.

The format of the region hierarchy file is,
# Version: CitizenCane.3
REGION-KEY,PARENT-KEY,REGION-NAME,NOTES
...

= Variable and Unit Taxonomy

Every data and output file will have three pieces of information embedded within it:
 * The dependency version, to track changes in the computation or region hierarchy (e.g., "FiddlerOnTheRoof.1", "CitizenCane.3.22")
 * The variable it describes (e.g., "precipitation", "violent crime rate")
 * The units used for that variable (e.g., "mm", "crimes/individual*month")
 * The source of the information (e.g., "BCSD", "Product(MonthDailyBins(ACRA_violentcrime_temperature, x - 273.15, 1 + x / 100), MonthDailyBins(ACRA_violentcrime_precipitation, x * (x > 0), 1 + x / 100))")

DMAS will use automatic variable and unit checking to ensure that appropriate calculations are used throughout.







= Weather Input Format

= Impact Output Format

== Data and Impact Function Management

= Aggregation Weights

The format of an aggregation weights file is,
REGION-KEY,WEIGHT,NOTES

= Constructing Output Calculations



= Units Checking







Constructing evaluations, models, bayesian combinations
Monitoring distributed computing jobs
Diagnostics

Handling data files
Historical and no-climate-change runs
Return times calculations
Handling GIS regions: different estimates in different regions



Constructing evaluations, models, bayesian combinations
Monitoring distributed computing jobs
Diagnostics

Consolidated result tables production
Aggregation
Sources of variation calculations
Adaptation




I started building a system for non-developers to submit automated jobs and follow the progress, upload new baseline data (e.g.), and more transparently see the calculations.
Monitoring and executing dashboard
Expression-builder tool


