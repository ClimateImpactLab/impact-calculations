# On Shackleton:
# source ~/aggregator/env/bin/activate
# python -m interpolate.python.surface2csvv /shares/gcp/data/adaptation/predictors-space-all

import sys, os, yaml, csv
import numpy as np
import curvegen, surface_space

do_singlebin = True

if do_singlebin:
    predcols = ['meandays_self', 'log gdppc', 'log popop']
else:
    predcols = ['meandays_nInfC_n17C', 'meandays_n17C_n12C', 'meandays_n12C_n7C', 'meandays_n7C_n2C', 'meandays_n2C_3C', 'meandays_3C_8C', 'meandays_8C_13C', 'meandays_13C_18C', 'meandays_23C_28C', 'meandays_28C_33C', 'meandays_33C_InfC', 'log gdppc', 'log popop']

predictorsdir = sys.argv[1]
dependencies = []

# Read in the predictors
binlos = []
binhis = []
meanses = []
serrses = []
predictorses = []
for binlo, binhi, means, serrs, predictors in surface_space.all_predictors(predictorsdir, predcols, dependencies, allowinf=True):
    binlos.append(binlo)
    binhis.append(binhi)
    meanses.append(means)
    serrses.append(serrs)
    predictorses.append(predictors)

# Create a consistent order, and fill in dropped bin
allxx = set(binlos)
allxx.update(binhis)
xxlimits = sorted(allxx)

# Reorder values
meanses2 = []
serrses2 = []
predictorses2 = []
for binlo in xxlimits[:-1]:
    try:
        ii = binlos.index(binlo)
        meanses2.append(meanses[ii])
        serrses2.append(serrses[ii])
        predictorses2.append(predictorses[ii])
    except:
        pass

fit = surface_space.seemur_fit(meanses, serrses, predictorses)
params = np.array(map(lambda x: x[0], fit.params))

with open(os.path.basename(sys.argv[1]) + ".csvv", 'w') as fp:
    fp.write("---\n")
    fp.write(yaml.dump(dict(oneline="Validation translation of " + sys.argv[1],
                            version="CSVV-TEST", dependencies=dependencies,
                            description="Generated by surface2csvv.",
                            variables=dict(NN="Contributing observations [int]",
                                           L="Stage 2 predictors [int]",
                                           K="Stage 1 coefficients [int]",
                                           gamma="Stage 2 coefficients, by L then K [float LK]",
                                           gammavcv="Stage 2 VCV [float LKxLK]",
                                           residvcv="Stage 2 residual VCV [float KxK]"))))
    fp.write("...\n")
    writer = csv.writer(fp)
    writer.writerow(["NN", len(meanses[0])])
    writer.writerow(["K", len(meanses)])
    writer.writerow(["L", len(predictorses[0][0]) + 1])
    fp.write("gamma\n")
    writer.writerow(params)
    fp.write("gammavcv\n")
    for ii in range(len(fit.cov_params())):
        writer.writerow(fit.cov_params()[ii, :])
    fp.write("residvcv\n")
    fp.write("0\n")

